---
title: "时间序列研究"
linkcolor: '#08519c'
navbar: right
---

# 研究设计

## 背景与参考文献

- Chen, R., Yin, P., Meng, X., Liu, C., Wang, L., Xu, X., ... & Zhou, M. (2017). Fine particulate air pollution and daily mortality. A nationwide analysis in 272 Chinese cities. ***American journal of Respiratory and Critical Care Medicine***, 196(1), 73-81.

- Chen, R., Yin, P., Wang, L., Liu, C., Niu, Y., Wang, W., ... & Zhou, M. (2018). Association between ambient temperature and mortality risk and burden: time series study in 272 main Chinese cities. ***BMJ***, 363.

- Liu, C., Chen, R., Sera, F., Vicedo-Cabrera, A. M., Guo, Y., Tong, S., ... & Kan, H. (2019). Ambient particulate air pollution and daily mortality in 652 cities. ***New England Journal of Medicine***, 381(8), 705-715.

- Chen, G., Guo, Y., Yue, X., Tong, S., Gasparrini, A., Bell, M. L., ... & Li, S. (2021). Mortality risk attributable to wildfire-related PM2· 5 pollution: a global time series study in 749 locations. ***The Lancet Planetary Health***, 5(9), e579-e587.

- Wang, X., Leng, M., Liu, Y., Qian, Z. M., Zhang, J., Li, Z., ... & Lin, H. (2021). Different sized particles associated with all-cause and cause-specific emergency ambulance calls: a multicity time-series analysis in China. ***Science of The Total Environment***, 783, 147060.

## 模型

两阶段模型法 

### 第一阶段：广义加性线性模型

广义加性线性模型（generalized additive model）：

- 计数型因变量（如发病人数）--> 类泊松连接函数
- 连续型因变量（如YLL ） --> 高斯连接函数

$$\log E(Y_t) = \alpha + \beta_0 \times\text{PM}_{2.5} \\
+ \beta_1 \times\text{day of week}\\
+ \beta_2 \times\text{public holidays}\\
s(t, \text{df} = \frac{6}{\text{year}}) \\
+ s(\text{temperature}, \text{df} = 6)\\ 
+ s(\text{relative humidity}, \text{df} = 6) $$

### 第二阶段：随机效应模型meta回归

I$^2$统计量用来评价不同城市间的异质性。



# 文献实例

- Liu, C., Chen, R., Sera, F., Vicedo-Cabrera, A. M., Guo, Y., Tong, S., ... & Kan, H. (2019). Ambient particulate air pollution and daily mortality in 652 cities. ***New England Journal of Medicine***, 381(8), 705-715. [PDF {{< fa book-open >}}](https://caimiao0714.github.io/SC-ENV-2023/Papers/Liu_2019_NEJM.pdf)



# R语言代码实战

```{r eval=FALSE}
pacman::p_load(lubridate, glue, tidyr, purrr, broom, mgcv, dplyr, data.table, 
               fst, ggplot2)

fit_ts_sep = function(pm_components, df_date, y, dat){
  
  fit_model = glue('{y} ~ {pm_components} +
                    s(admit_date_int, k = {df_date}, fx = T, bs = "cr") +
                    dow + s(Temperature_MA_07, k = 6) +
                    s(RH_MA_07, k = 6)') %>%
    as.formula() %>%
    gam(family = quasipoisson(link = "log"),
        scale = -1,
        control = gam.control(epsilon = 0.0000001,
                              maxit = 1000),
        na.action = na.omit,
        data = dat)
  
  coef_vec = summary(fit_model)$p.coeff
  se_vec = summary(fit_model)$se
  pval_vec = summary(fit_model)$p.pv
  
  coef_point = coef_vec[names(coef_vec) == pm_components]
  se_point = se_vec[names(se_vec) == pm_components]
  pval_point = pval_vec[names(pval_vec) == pm_components]
  
  ER = (exp(coef_point) - 1)*100
  CI_lower = (exp(coef_point - 1.96*se_point) - 1)*100
  CI_upper = (exp(coef_point + 1.96*se_point) - 1)*100
  
  ER_95CI = glue("{formatC(round(ER, 2), format = 'f', digits = 2)} ",
                 "({formatC(round(CI_lower, 2), format = 'f', digits = 2)} to ",
                 "{formatC(round(CI_upper, 2), format = 'f', digits = 2)})")
  
  output = data.table(
    pm_components = pm_components, 
    #pm_component_IQR = formatC(round(IQR_range, 2), format = 'f', digits = 2), 
    n = dat[,.N],
    ER_95CI = ER_95CI,
    ER = ER, 
    CI_lower = CI_lower, 
    CI_upper = CI_upper, 
    p_value = pval_point,
    log_OR = coef_point, 
    log_OR_se = se_point)
  
  return(output)
}
```


```{r eval=FALSE}
pollutant_vec7 = c(
  "PM2.5_MA_07", "SO4_MA_07", "NO3_MA_07", "NH4_MA_07", "OM_MA_07", "BC_MA_07")


IQR_pollutant_county = map_dfr(
  pollutant_vec7,
  ~data.table(pollutant = .x, 
              IQR = IQR(d_sub1[[.x]], na.rm = TRUE)))

prov_county_obs_length = d_sub1 %>% 
  group_by(Province_CN, Province, City_code, City, County, Cnty_code) %>% 
  summarise(admit_date_min = min(admit_date),
            admit_date_max = max(admit_date),
            obs_length = as.integer(max(admit_date) - min(admit_date))/365,
            df = round(obs_length)*6) %>% 
  ungroup()


map_city = function(dat, y, df_date, county_id){
  
  #pb$tick()$print()
  df_date_vector = rep(df_date, length(pollutant_vec7))
  
  res = map2_dfr(pollutant_vec7, df_date, .f = fit_ts_sep, dat = dat, y = y)
  
  fwrite(res, glue('Results/{y}_{county_id}.csv'))
  
  return(res)
}

est_prov_county = d_sub1 %>% 
  .[,N_obs := .N,.(Cnty_code)] %>% 
  filter(!is.na(BC_MA_07) & !is.na(Temperature_MA_07) & N_obs > 100) %>% 
  mutate(across(PM2.5_MA_07:BC_MA_07, ~.x/IQR(.x))) %>% 
  group_by(Province_CN, Province, City_code, City, County, Cnty_code) %>% 
  nest() %>%
  left_join(prov_county_obs_length %>% 
              dplyr::select(Cnty_code, df),
            by = 'Cnty_code') %>% 
			#filter(Cnty_code == 140105) %>%
  mutate(#hospitallevel_tertiary = pmap(.l = list(data, df, Cnty_code), 
         #                              .f = map_city, 
         #                              y = 'hospitallevel_tertiary'),
         hospitallevel_secondary = pmap(.l = list(data, df, Cnty_code), 
                                        .f = map_city, 
                                        y = 'hospitallevel_secondary'))


res_county_sub = est_prov_county %>% 
  dplyr::select(-data)
```





