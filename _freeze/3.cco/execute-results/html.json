{
  "hash": "3af0bbdd1da77c8be1bf699b8ae01d8c",
  "result": {
    "markdown": "---\ntitle: \"时间分层的病例交叉研究\"\nlinkcolor: '#08519c'\nnavbar: right\n---\n\n\n# 研究设计\n\n\n\n\n\n# 文献实例\n\n- Chen, R., Jiang, Y., Hu, J., Chen, H., Li, H., Meng, X., ... & Kan, H. (2022). Hourly air pollutants and acute coronary syndrome onset in 1.29 million patients. ***Circulation*** ([IF=39.9]{style=\"color:#9A0000;font-weight: bold;\"}), 145(24), 1749-1760.\n\n- Liu, Y., Pan, J., Fan, C., Xu, R., Wang, Y., Xu, C., ... & Zhang, L. (2021). Short-term exposure to ambient air pollution and mortality from myocardial infarction. ***Journal of the American College of Cardiology*** ([IF=27.2]{style=\"color:#9A0000;font-weight: bold;\"}), 77(3), 271-281. [PDF {{< fa book-open >}}](https://caimiao0714.github.io/SC-ENV-2023/Papers/Liu_2021_JACC_time_stratified_case_crossover.pdf) \n\n- **Cai, M.**, Wei, J., Zhang, S., Liu, W., Wang, L., Qian, Z., Lin, H., Liu, E., McMillin, S.E., Cao, Y., Yin, P. (2023). Short-term air pollution exposure associated with death from kidney diseases: a nationwide time-stratified case-crossover study in China from 2015 to 2019. ***BMC Medicine*** ([IF=11.8]{style=\"color:#9A0000;font-weight: bold;\"}), 21(1), 32. [PDF {{< fa book-open >}}](https://caimiao0714.github.io/SC-ENV-2023/Papers/2023_1_BMC_Med_Air_pollution_kidney_death.pdf) \n\n\n\n\n# R语言代码实战\n\n## 数据读取\n\n\n::: {.cell hash='3.cco_cache/html/unnamed-chunk-1_64033ec8d91edce96b2b45f95764d69d'}\n\n```{.r .cell-code}\npacman::p_load(\n  arrow, dplyr, ggplot2, data.table, broom, survival, splines, purrr)\n\ncco_pm = arrow::read_parquet(\n  'Data/cco_synthetic.parquet')\ncco_pm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           id case date_control date_event Temperature_MA_07 RH_MA_07\n    1:      8    0   2015-07-04 2015-07-18         25.157479 56.29268\n    2:      8    0   2015-07-11 2015-07-18         26.654723 56.55889\n    3:      8    1   2015-07-18 2015-07-18         27.834193 63.31046\n    4:      8    0   2015-07-25 2015-07-18         26.476728 78.44241\n    5:     18    1   2015-03-04 2015-03-04          5.590609 39.37510\n   ---                                                               \n36389: 101967    0   2019-05-28 2019-05-21         23.694810 43.10004\n36390: 101975    0   2019-10-06 2019-10-27         18.622571 56.82667\n36391: 101975    0   2019-10-13 2019-10-27         15.517046 74.24209\n36392: 101975    0   2019-10-20 2019-10-27         13.168067 62.80148\n36393: 101975    1   2019-10-27 2019-10-27         13.901184 61.54964\n       PM2.5_MA_01 PM2.5_MA_02 PM2.5_MA_03 PM2.5_MA_04 PM2.5_MA_05 PM2.5_MA_06\n    1:    49.64125    51.20873    52.53419    50.22526    50.45423    54.99141\n    2:    71.13610    69.57587    69.62826    69.04128    67.57404    65.71766\n    3:    59.45812    61.56069    62.17871    62.92857    64.49090    65.11285\n    4:    61.66376    61.54747    60.31168    60.95178    61.53650    61.19540\n    5:    42.55674    51.69360    59.29741    63.24530    65.97250    74.70118\n   ---                                                                        \n36389:    24.23324    29.30652    33.04356    33.84328    34.94796    35.59586\n36390:    22.31457    29.18031    32.21481    33.99911    35.63098    37.01669\n36391:    35.99716    34.55549    32.92004    37.70209    39.71017    39.65420\n36392:    78.43440    80.46264    77.49954    73.02039    65.72646    59.30752\n36393:    50.84817    44.64038    54.94739    60.00659    63.58455    65.79182\n       PM2.5_MA_07\n    1:    57.36381\n    2:    64.22242\n    3:    65.32272\n    4:    60.85549\n    5:    81.05209\n   ---            \n36389:    35.43058\n36390:    38.24265\n36391:    38.10932\n36392:    56.35800\n36393:    66.64737\n```\n:::\n:::\n\n\n## 统计建模-条件逻辑回归\n\n\n::: {.cell hash='3.cco_cache/html/unnamed-chunk-2_5a747bd459134d3d234350b3c84c0f3e'}\n\n```{.r .cell-code}\nfit_clogit = function(x, tm_RH_lag = 'MA_07', data = cco_pm){\n  print(glue::glue('\\n----------{x}; {tm_RH_lag}----------\\n'))\n  iqr_x = IQR(data[[x]], na.rm = TRUE)\n  \n  clean_fit = clogit(\n    formula = as.formula(paste0(\"case ~ \", \n                    x, \n                    ' + ns(Temperature_',\n                    tm_RH_lag,\n                    ', df = 5) + ns(RH_',\n                    tm_RH_lag,\n                    ', df = 5)',\n                    ' + strata(id)')),\n    data = data) %>% \n    broom::tidy() %>% \n    mutate(OR = exp(estimate*iqr_x), 3,\n           OR_round = round(exp(estimate*iqr_x), 3),\n           CI_low = exp(estimate*iqr_x - 1.96*std.error*iqr_x),\n           CI_high = exp(estimate*iqr_x + 1.96*std.error*iqr_x),\n           CI_low_round = round(exp(estimate*iqr_x - 1.96*std.error*iqr_x), 3),\n           CI_high_round = round(exp(estimate*iqr_x + 1.96*std.error*iqr_x), 3),\n           predictor = x,\n           iqr = iqr_x,\n           tm_RH_lag = tm_RH_lag) %>% \n    mutate(result = paste0(format(OR_round, nsmall = 3), \n                           ' (', \n                           format(CI_low_round, nsmall = 3), \n                           '-', \n                           format(CI_high_round, nsmall = 3),\n                           ')')) %>% \n    filter(predictor == term) %>% \n    mutate(result = gsub('000e\\\\+00| ', '', result)) %>% \n    select(predictor, term, iqr, result, OR, CI_low, CI_high, p.value)\n  \n  return(clean_fit)\n}\n\npm_cols = cco_pm %>% \n  select(starts_with('PM2.5')) %>% \n  names()\n\nfit_cco = map_dfr(\n  pm_cols,\n  fit_clogit,\n  data = cco_pm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n----------PM2.5_MA_01; MA_07----------\n----------PM2.5_MA_02; MA_07----------\n----------PM2.5_MA_03; MA_07----------\n----------PM2.5_MA_04; MA_07----------\n----------PM2.5_MA_05; MA_07----------\n----------PM2.5_MA_06; MA_07----------\n----------PM2.5_MA_07; MA_07----------\n```\n:::\n\n```{.r .cell-code}\nfit_cco \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 8\n  predictor   term          iqr result                OR CI_low CI_high p.value\n  <chr>       <chr>       <dbl> <chr>              <dbl>  <dbl>   <dbl>   <dbl>\n1 PM2.5_MA_01 PM2.5_MA_01  29.4 1.023(0.984-1.063)  1.02  0.984    1.06   0.249\n2 PM2.5_MA_02 PM2.5_MA_02  29.2 1.022(0.980-1.065)  1.02  0.980    1.07   0.318\n3 PM2.5_MA_03 PM2.5_MA_03  29.0 1.023(0.978-1.070)  1.02  0.978    1.07   0.324\n4 PM2.5_MA_04 PM2.5_MA_04  28.8 1.029(0.980-1.080)  1.03  0.980    1.08   0.249\n5 PM2.5_MA_05 PM2.5_MA_05  28.7 1.035(0.983-1.090)  1.04  0.983    1.09   0.194\n6 PM2.5_MA_06 PM2.5_MA_06  28.7 1.040(0.983-1.099)  1.04  0.983    1.10   0.172\n7 PM2.5_MA_07 PM2.5_MA_07  28.6 1.042(0.982-1.106)  1.04  0.982    1.11   0.175\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}