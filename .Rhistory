exposure_NH4 = exposure %>%
filter(date == ymd('2014-01-03')) %>%
dplyr::select(longitude, latitude, NH4) %>%
rasterFromXYZ()
exposure_OM = exposure %>%
filter(date == ymd('2014-01-03')) %>%
dplyr::select(longitude, latitude, OM) %>%
rasterFromXYZ()
exposure_BC = exposure %>%
filter(date == ymd('2014-01-03')) %>%
dplyr::select(longitude, latitude, BC) %>%
rasterFromXYZ()
exposure_BC
eval_pollutant = individual %>%
mutate(
PM2.5 = raster::extract(
exposure_PM2.5,
individual[,c('longitude', 'latitude')],
method = "bilinear"),
SO4 = raster::extract(
exposure_SO4,
individual[,c('longitude', 'latitude')],
method = "bilinear"),
NO3 = raster::extract(
exposure_NO3,
individual[,c('longitude', 'latitude')],
method = "bilinear"),
NH4 = raster::extract(
exposure_NH4,
individual[,c('longitude', 'latitude')],
method = "bilinear"),
OM = raster::extract(
exposure_OM,
individual[,c('longitude', 'latitude')],
method = "bilinear"),
BC = raster::extract(
exposure_BC,
individual[,c('longitude', 'latitude')],
method = "bilinear"))
eval_pollutant
pacman::p_load(
arrow, dplyr, ggplot2, data.table, broom, lme4, splines)
cohort_lme = arrow::read_parquet(
'Data/cohort_lmer_synthetic.parquet')
glimpse(cohort_lme)
pacman::p_load(
arrow, dplyr, ggplot2, data.table, broom, lme4, splines)
cohort_lme = arrow::read_parquet(
'Data/cohort_lmer_synthetic.parquet')
glimpse(cohort_lme)
names(cohort_lme) %>% dput
pacman::p_load(
arrow, dplyr, ggplot2, data.table, broom, lme4, splines)
cohort_lme = arrow::read_parquet(
'Data/cohort_lmer_synthetic.parquet')
glimpse(cohort_lme)
fit_lme = function(y){
f0 = lmer(as.formula(glue('{y} ~ PM2.5:delta_t + delta_t + age + sex + smoking_status +
(1|id)')), data = dlme4)
f0 %>%
tidy(conf.int = TRUE) %>%
filter(grepl('PM2.5', term)) %>%
mutate(estimate = estimate,
conf.low = conf.low,
conf.high = conf.high) %>%
mutate(CI = paste0(str_pad(round(estimate, 3), width = 5, side = 'right', pad = '0'),
' (',
str_pad(round(conf.low, 3), width = 5, side = 'right', pad = '0'),
', ',
str_pad(round(conf.high, 3), width = 5, side = 'right', pad = '0'),
')')) %>%
mutate(y = y,
N = nobs(f0)) %>%
dplyr::select(y, term, estimate, CI, conf.low, conf.high, std.error)
}
res = map_dfr(
c("body_fat_p", "arm_left_fat_p", "arm_right_fat_p",
"leg_left_fat_p", "leg_right_fat_p", "trunk_fat_p"),
fit_lme)
pacman::p_load(
arrow, dplyr, ggplot2, data.table, broom, lme4, purrr)
cohort_lme = arrow::read_parquet(
'Data/cohort_lmer_synthetic.parquet')
glimpse(cohort_lme)
fit_lme = function(y){
f0 = lmer(as.formula(glue('{y} ~ PM2.5:delta_t + delta_t + age + sex + smoking_status +
(1|id)')), data = dlme4)
f0 %>%
tidy(conf.int = TRUE) %>%
filter(grepl('PM2.5', term)) %>%
mutate(estimate = estimate,
conf.low = conf.low,
conf.high = conf.high) %>%
mutate(CI = paste0(str_pad(round(estimate, 3), width = 5, side = 'right', pad = '0'),
' (',
str_pad(round(conf.low, 3), width = 5, side = 'right', pad = '0'),
', ',
str_pad(round(conf.high, 3), width = 5, side = 'right', pad = '0'),
')')) %>%
mutate(y = y,
N = nobs(f0)) %>%
dplyr::select(y, term, estimate, CI, conf.low, conf.high, std.error)
}
res = map_dfr(
c("body_fat_p", "arm_left_fat_p", "arm_right_fat_p",
"leg_left_fat_p", "leg_right_fat_p", "trunk_fat_p"),
fit_lme)
pacman::p_load(
arrow, dplyr, ggplot2, data.table, broom, lme4, purrr, glue)
cohort_lme = arrow::read_parquet(
'Data/cohort_lmer_synthetic.parquet')
glimpse(cohort_lme)
fit_lme = function(y){
f0 = lmer(as.formula(glue('{y} ~ PM2.5:delta_t + delta_t + age + sex + smoking_status +
(1|id)')), data = dlme4)
f0 %>%
tidy(conf.int = TRUE) %>%
filter(grepl('PM2.5', term)) %>%
mutate(estimate = estimate,
conf.low = conf.low,
conf.high = conf.high) %>%
mutate(CI = paste0(str_pad(round(estimate, 3), width = 5, side = 'right', pad = '0'),
' (',
str_pad(round(conf.low, 3), width = 5, side = 'right', pad = '0'),
', ',
str_pad(round(conf.high, 3), width = 5, side = 'right', pad = '0'),
')')) %>%
mutate(y = y,
N = nobs(f0)) %>%
dplyr::select(y, term, estimate, CI, conf.low, conf.high, std.error)
}
res = map_dfr(
c("body_fat_p", "arm_left_fat_p", "arm_right_fat_p",
"leg_left_fat_p", "leg_right_fat_p", "trunk_fat_p"),
fit_lme)
fit_lme = function(y){
f0 = lmer(as.formula(glue('{y} ~ PM2.5:delta_t + delta_t + age + sex + smoking_status +
(1|id)')), data = cohort_lme)
f0 %>%
tidy(conf.int = TRUE) %>%
filter(grepl('PM2.5', term)) %>%
mutate(estimate = estimate,
conf.low = conf.low,
conf.high = conf.high) %>%
mutate(CI = paste0(str_pad(round(estimate, 3), width = 5, side = 'right', pad = '0'),
' (',
str_pad(round(conf.low, 3), width = 5, side = 'right', pad = '0'),
', ',
str_pad(round(conf.high, 3), width = 5, side = 'right', pad = '0'),
')')) %>%
mutate(y = y,
N = nobs(f0)) %>%
dplyr::select(y, term, estimate, CI, conf.low, conf.high, std.error)
}
res = map_dfr(
c("body_fat_p", "arm_left_fat_p", "arm_right_fat_p",
"leg_left_fat_p", "leg_right_fat_p", "trunk_fat_p"),
fit_lme)
pacman::p_load(
arrow, dplyr, ggplot2, data.table, broom.mixed, lme4, purrr, glue)
cohort_lme = arrow::read_parquet(
'Data/cohort_lmer_synthetic.parquet')
glimpse(cohort_lme)
fit_lme = function(y){
f0 = lmer(as.formula(glue('{y} ~ PM2.5:delta_t + delta_t + age + sex + smoking_status +
(1|id)')), data = cohort_lme)
f0 %>%
tidy(conf.int = TRUE) %>%
filter(grepl('PM2.5', term)) %>%
mutate(estimate = estimate,
conf.low = conf.low,
conf.high = conf.high) %>%
mutate(CI = paste0(str_pad(round(estimate, 3), width = 5, side = 'right', pad = '0'),
' (',
str_pad(round(conf.low, 3), width = 5, side = 'right', pad = '0'),
', ',
str_pad(round(conf.high, 3), width = 5, side = 'right', pad = '0'),
')')) %>%
mutate(y = y,
N = nobs(f0)) %>%
dplyr::select(y, term, estimate, CI, conf.low, conf.high, std.error)
}
res = map_dfr(
c("body_fat_p", "arm_left_fat_p", "arm_right_fat_p",
"leg_left_fat_p", "leg_right_fat_p", "trunk_fat_p"),
fit_lme)
pacman::p_load(
arrow, dplyr, ggplot2, data.table, broom.mixed, lme4, purrr, glue, stringr)
cohort_lme = arrow::read_parquet(
'Data/cohort_lmer_synthetic.parquet')
glimpse(cohort_lme)
fit_lme = function(y){
f0 = lmer(as.formula(glue('{y} ~ PM2.5:delta_t + delta_t + age + sex + smoking_status +
(1|id)')), data = cohort_lme)
f0 %>%
tidy(conf.int = TRUE) %>%
filter(grepl('PM2.5', term)) %>%
mutate(estimate = estimate,
conf.low = conf.low,
conf.high = conf.high) %>%
mutate(CI = paste0(str_pad(round(estimate, 3), width = 5, side = 'right', pad = '0'),
' (',
str_pad(round(conf.low, 3), width = 5, side = 'right', pad = '0'),
', ',
str_pad(round(conf.high, 3), width = 5, side = 'right', pad = '0'),
')')) %>%
mutate(y = y,
N = nobs(f0)) %>%
dplyr::select(y, term, estimate, CI, conf.low, conf.high, std.error)
}
res = map_dfr(
c("body_fat_p", "arm_left_fat_p", "arm_right_fat_p",
"leg_left_fat_p", "leg_right_fat_p", "trunk_fat_p"),
fit_lme)
res
fit_lme = function(y){
f0 = lmer(as.formula(glue('{y} ~ PM2.5:delta_t + delta_t + age + sex + smoking_status +
(1|id)')), data = cohort_lme)
f0 %>%
tidy(conf.int = TRUE) %>%
filter(grepl('PM2.5', term)) %>%
mutate(estimate = estimate,
conf.low = conf.low,
conf.high = conf.high) %>%
mutate(CI = paste0(str_pad(round(estimate, 3), width = 5, side = 'right', pad = '0'),
' (',
str_pad(round(conf.low, 3), width = 5, side = 'right', pad = '0'),
', ',
str_pad(round(conf.high, 3), width = 5, side = 'right', pad = '0'),
')')) %>%
mutate(y = y,
N = nobs(f0)) %>%
dplyr::select(y, term, estimate, CI, conf.low, conf.high, std.error)
}
res = map_dfr(
c("body_fat_p", "arm_left_fat_p", "arm_right_fat_p",
"leg_left_fat_p", "leg_right_fat_p", "trunk_fat_p"),
fit_lme)
res
pacman::p_load(
arrow, dplyr, ggplot2, data.table, broom, splines, purrr, tableone, patchwork, latex2exp)
cs_pm = arrow::read_parquet(
'Data/cs_synthetic_pm_components.parquet')
glimpse(cs_pm)
af_point = function(quantile_threshold = 0.05){
PM2.5_threshold = d[,quantile(PM2.5_y1, quantile_threshold, na.rm = TRUE)]
dshort_new = d %>%
copy() %>%
.[,`:=`(PM2.5_y1 = fifelse(PM2.5_y1 >= PM2.5_threshold, PM2.5_threshold, PM2.5_y1))]
# d %>% .[province == '湖北省',.(PM2.5_y1, BC_y1, OM_y1, SO4_y1, NO3_y1, NH4_y1)]
# dshort_new %>% .[province == '湖北省',.(PM2.5_y1, BC_y1, OM_y1, SO4_y1, NO3_y1, NH4_y1)]
#
fit_PM2.5 = glm(formula = as.formula(glue::glue(
"inhosp_death ~ PM2.5_y1  + age + sex + ethnicity + occupation + marriage +
stroke_subtype + hypertension + diabetes +
ns(Temperature_MA_07 , df = 5) + ns(RH_MA_07, df = 5)")),
family = binomial, data = d)
dshort_pred = danalysis %>%
.[,.(death_PM2.5_pred = predict(fit_PM2.5, newdata = dshort_new, type = 'response'))]
return(dshort_pred[,.(PM2.5_pred = mean(death_PM2.5_pred, na.rm = TRUE),
BC_pred = mean(death_BC_pred, na.rm = TRUE),
OM_pred = mean(death_OM_pred, na.rm = TRUE),
SO4_pred = mean(death_SO4_pred, na.rm = TRUE),
NO3_pred = mean(death_NO3_pred, na.rm = TRUE),
NH4_pred = mean(death_NH4_pred, na.rm = TRUE))] %>%
tidyr::gather() %>%
setnames(new = c('PM', 'fatality_pred')) %>%
as.data.table())
}
af_result_0.05 = af_point(0.05)
af_point = function(quantile_threshold = 0.05){
PM2.5_threshold = cs_pm[,quantile(PM2.5_y1, quantile_threshold, na.rm = TRUE)]
dshort_new = cs_pm %>%
copy() %>%
.[,`:=`(PM2.5_y1 = fifelse(PM2.5_y1 >= PM2.5_threshold, PM2.5_threshold, PM2.5_y1))]
fit_PM2.5 = glm(formula = as.formula(glue::glue(
"inhosp_death ~ PM2.5_y1  + age + sex + ethnicity + occupation + marriage +
stroke_subtype + hypertension + diabetes +
ns(Temperature_MA_07 , df = 5) + ns(RH_MA_07, df = 5)")),
family = binomial, data = cs_pm)
dshort_pred = danalysis %>%
.[,.(death_PM2.5_pred = predict(fit_PM2.5, newdata = dshort_new, type = 'response'))]
return(dshort_pred[,.(PM2.5_pred = mean(death_PM2.5_pred, na.rm = TRUE))] %>%
tidyr::gather() %>%
setnames(new = c('PM', 'fatality_pred')) %>%
as.data.table())
}
af_result_0.05 = af_point(0.05)
cs_pm
af_point = function(quantile_threshold = 0.05){
PM2.5_threshold = cs_pm[,quantile(PM2.5_MA_365, quantile_threshold, na.rm = TRUE)]
dshort_new = cs_pm %>%
copy() %>%
.[,`:=`(PM2.5_MA_365 = fifelse(PM2.5_MA_365 >= PM2.5_threshold,
PM2.5_threshold,
PM2.5_MA_365))]
fit_PM2.5 = glm(formula = as.formula(glue::glue(
"inhosp_death ~ PM2.5_MA_365  + age + sex + ethnicity + occupation + marriage +
stroke_subtype + hypertension + diabetes +
ns(Temperature_MA_07 , df = 5) + ns(RH_MA_07, df = 5)")),
family = binomial, data = cs_pm)
dshort_pred = danalysis %>%
.[,.(death_PM2.5_pred = predict(fit_PM2.5, newdata = dshort_new, type = 'response'))]
return(dshort_pred[,.(PM2.5_pred = mean(death_PM2.5_pred, na.rm = TRUE))] %>%
tidyr::gather() %>%
setnames(new = c('PM', 'fatality_pred')) %>%
as.data.table())
}
af_result_0.05 = af_point(0.05)
af_point = function(quantile_threshold = 0.05){
PM2.5_threshold = cs_pm[,quantile(PM2.5_MA_365, quantile_threshold, na.rm = TRUE)]
dshort_new = cs_pm %>%
copy() %>%
.[,`:=`(PM2.5_MA_365 = fifelse(PM2.5_MA_365 >= PM2.5_threshold,
PM2.5_threshold,
PM2.5_MA_365))]
fit_PM2.5 = glm(formula = as.formula(glue::glue(
"inhosp_death ~ PM2.5_MA_365  + age + sex + ethnicity + occupation + marriage +
stroke_subtype + hypertension + diabetes +
ns(Temperature_MA_07 , df = 5) + ns(RH_MA_07, df = 5)")),
family = binomial, data = cs_pm)
dshort_pred = danalysis %>%
.[,.(death_PM2.5_pred = predict(fit_PM2.5, newdata = dshort_new, type = 'response'))]
return(dshort_pred[,.(obs_outcome = mean(inhosp_death),
PM2.5_pred = mean(death_PM2.5_pred))])
}
af_result_0.05 = af_point(0.05)
af_point = function(quantile_threshold = 0.05){
PM2.5_threshold = cs_pm[,quantile(PM2.5_MA_365, quantile_threshold, na.rm = TRUE)]
dshort_new = cs_pm %>%
copy() %>%
.[,`:=`(PM2.5_MA_365 = fifelse(PM2.5_MA_365 >= PM2.5_threshold,
PM2.5_threshold,
PM2.5_MA_365))]
fit_PM2.5 = glm(formula = as.formula(glue::glue(
"inhosp_death ~ PM2.5_MA_365  + age + sex + ethnicity + occupation + marriage +
stroke_subtype + hypertension + diabetes +
ns(Temperature_MA_07 , df = 5) + ns(RH_MA_07, df = 5)")),
family = binomial, data = cs_pm)
dshort_pred = cs_pm %>%
.[,.(inhosp_death,
death_PM2.5_pred = predict(fit_PM2.5, newdata = dshort_new, type = 'response'))]
return(dshort_pred[,.(obs_outcome = mean(inhosp_death),
PM2.5_pred = mean(death_PM2.5_pred))])
}
af_result_0.05 = af_point(0.05)
af_result_0.05
cs_pm[,quantile(PM2.5_MA_365, quantile_threshold, na.rm = TRUE)]
cs_pm[,quantile(PM2.5_MA_365, 0.05, na.rm = TRUE)]
zz = cs_pm %>%
copy() %>%
.[,`:=`(PM2.5_MA_365 = fifelse(PM2.5_MA_365 >= 29.24355,
29.24355,
PM2.5_MA_365))]
zz
zz
zz[,mean(PM2.5_MA_365)]
af_point = function(quantile_threshold = 0.05){
PM2.5_threshold = cs_pm[,quantile(PM2.5_MA_365, quantile_threshold, na.rm = TRUE)]
dshort_new = cs_pm %>%
copy() %>%
.[,`:=`(PM2.5_MA_365 = fifelse(PM2.5_MA_365 >= PM2.5_threshold,
PM2.5_threshold,
PM2.5_MA_365))]
fit_PM2.5 = glm(formula = as.formula(glue::glue(
"inhosp_death ~ PM2.5_MA_365  + age + sex + ethnicity + occupation + marriage +
stroke_subtype + hypertension + diabetes +
ns(Temperature_MA_07 , df = 5) + ns(RH_MA_07, df = 5)")),
family = binomial, data = cs_pm)
dshort_pred = cs_pm %>%
.[,.(inhosp_death,
death_PM2.5_pred = predict(fit_PM2.5, newdata = dshort_new, type = 'response'))]
return(dshort_pred[,.(obs_outcome = mean(inhosp_death),
PM2.5_pred = mean(death_PM2.5_pred, na.rm = T))])
}
af_result_0.05 = af_point(0.05)
af_result_0.05
af_result_0.05 %>%
tidyr::gather() %>%
setnames(new = c('PM', 'fatality_pred')) %>%
as.data.table()
af_result_0.05 %>%
mutate(PAF = (obs_outcome - PM2.5_pred)/obs_outcome)
af_result_0.05 %>%
mutate(PAF = glue('(round({obs_outcome - PM2.5_pred)*100/obs_outcome, 2)}%'))
af_result_0.05 %>%
mutate(PAF = glue('{(round(obs_outcome - PM2.5_pred)*100/obs_outcome, 2)}%'))
af_result_0.05 %>%
mutate(PAF = glue('{round((obs_outcome - PM2.5_pred)*100/obs_outcome, 2)}%'))
set.seed(123)
n_interations = 10
paf_container = vector("list", length = n_interations)
for (i in 1:n_interations) {
print(glue('***********{i}/{n_interations}, {round(i/n_interations*100, 1)}'))
cs_pm_resample = cs_pm[sample(.N, .N, replace = TRUE), ]
paf_container[[i]] = af_point(cs_pm_resample)
}
af_point = function(quantile_threshold = 0.05, dat = cs_pm){
PM2.5_threshold = dat[,quantile(PM2.5_MA_365, quantile_threshold, na.rm = TRUE)]
dshort_new = dat %>%
copy() %>%
.[,`:=`(PM2.5_MA_365 = fifelse(PM2.5_MA_365 >= PM2.5_threshold,
PM2.5_threshold,
PM2.5_MA_365))]
fit_PM2.5 = glm(formula = as.formula(glue::glue(
"inhosp_death ~ PM2.5_MA_365  + age + sex + ethnicity + occupation + marriage +
stroke_subtype + hypertension + diabetes +
ns(Temperature_MA_07 , df = 5) + ns(RH_MA_07, df = 5)")),
family = binomial, data = dat)
dshort_pred = dat %>%
.[,.(inhosp_death,
death_PM2.5_pred = predict(fit_PM2.5, newdata = dshort_new, type = 'response'))]
return(dshort_pred[,.(obs_outcome = mean(inhosp_death),
PM2.5_pred = mean(death_PM2.5_pred, na.rm = T))])
}
af_result_0.05 = af_point(0.05) %>%
mutate(PAF = glue('{round((obs_outcome - PM2.5_pred)*100/obs_outcome, 2)}%'))
af_result_0.05
set.seed(123)
n_interations = 10
paf_container = vector("list", length = n_interations)
for (i in 1:n_interations) {
print(glue('***********{i}/{n_interations}, {round(i/n_interations*100, 1)}'))
cs_pm_resample = cs_pm[sample(.N, .N, replace = TRUE), ]
paf_container[[i]] = af_point(dat = cs_pm_resample)
}
paf_ci = rbindlist(paf_container)
paf_ci
af_point = function(quantile_threshold = 0.05, dat = cs_pm){
PM2.5_threshold = dat[,quantile(PM2.5_MA_365, quantile_threshold, na.rm = TRUE)]
dshort_new = dat %>%
copy() %>%
.[,`:=`(PM2.5_MA_365 = fifelse(PM2.5_MA_365 >= PM2.5_threshold,
PM2.5_threshold,
PM2.5_MA_365))]
fit_PM2.5 = glm(formula = as.formula(glue::glue(
"inhosp_death ~ PM2.5_MA_365  + age + sex + ethnicity + occupation + marriage +
stroke_subtype + hypertension + diabetes +
ns(Temperature_MA_07 , df = 5) + ns(RH_MA_07, df = 5)")),
family = binomial, data = dat)
dshort_pred = dat %>%
.[,.(inhosp_death,
death_PM2.5_pred = predict(fit_PM2.5, newdata = dshort_new, type = 'response'))]
return(dshort_pred[,.(obs_outcome = mean(inhosp_death),
PM2.5_pred = mean(death_PM2.5_pred, na.rm = T))] %>%
mutate(PAF = glue('{round((obs_outcome - PM2.5_pred)*100/obs_outcome, 2)}%')))
}
af_result_0.05 = af_point(0.05)
af_result_0.05
set.seed(123)
n_interations = 10
paf_container = vector("list", length = n_interations)
for (i in 1:n_interations) {
print(glue('***********{i}/{n_interations}, {round(i/n_interations*100, 1)}%***********'))
cs_pm_resample = cs_pm[sample(.N, .N, replace = TRUE), ]
paf_container[[i]] = af_point(dat = cs_pm_resample)
}
paf_ci = rbindlist(paf_container)
paf_ci
af_point = function(quantile_threshold = 0.05, dat = cs_pm){
PM2.5_threshold = dat[,quantile(PM2.5_MA_365, quantile_threshold, na.rm = TRUE)]
dshort_new = dat %>%
copy() %>%
.[,`:=`(PM2.5_MA_365 = fifelse(PM2.5_MA_365 >= PM2.5_threshold,
PM2.5_threshold,
PM2.5_MA_365))]
fit_PM2.5 = glm(formula = as.formula(glue::glue(
"inhosp_death ~ PM2.5_MA_365  + age + sex + ethnicity + occupation + marriage +
stroke_subtype + hypertension + diabetes +
ns(Temperature_MA_07 , df = 5) + ns(RH_MA_07, df = 5)")),
family = binomial, data = dat)
dshort_pred = dat %>%
.[,.(inhosp_death,
death_PM2.5_pred = predict(fit_PM2.5, newdata = dshort_new, type = 'response'))]
return(dshort_pred[,.(obs_outcome = mean(inhosp_death),
PM2.5_pred = mean(death_PM2.5_pred, na.rm = T))] %>%
mutate(PAF = (obs_outcome - PM2.5_pred)*100/obs_outcome))
}
af_result_0.05 = af_point(0.05)
af_result_0.05
af_point = function(quantile_threshold = 0.05, dat = cs_pm){
PM2.5_threshold = dat[,quantile(PM2.5_MA_365, quantile_threshold, na.rm = TRUE)]
dshort_new = dat %>%
copy() %>%
.[,`:=`(PM2.5_MA_365 = fifelse(PM2.5_MA_365 >= PM2.5_threshold,
PM2.5_threshold,
PM2.5_MA_365))]
fit_PM2.5 = glm(formula = as.formula(glue::glue(
"inhosp_death ~ PM2.5_MA_365  + age + sex + ethnicity + occupation + marriage +
stroke_subtype + hypertension + diabetes +
ns(Temperature_MA_07 , df = 5) + ns(RH_MA_07, df = 5)")),
family = binomial, data = dat)
dshort_pred = dat %>%
.[,.(inhosp_death,
death_PM2.5_pred = predict(fit_PM2.5, newdata = dshort_new, type = 'response'))]
return(dshort_pred[,.(obs_outcome = mean(inhosp_death),
PM2.5_pred = mean(death_PM2.5_pred, na.rm = T))] %>%
mutate(PAF = (obs_outcome - PM2.5_pred)/obs_outcome))
}
af_result_0.05 = af_point(0.05)
af_result_0.05
set.seed(123)
n_interations = 10
paf_container = vector("list", length = n_interations)
for (i in 1:n_interations) {
print(glue('***********{i}/{n_interations}, {round(i/n_interations*100, 1)}%***********'))
cs_pm_resample = cs_pm[sample(.N, .N, replace = TRUE), ]
paf_container[[i]] = af_point(dat = cs_pm_resample)
}
paf_ci = rbindlist(paf_container)
paf_ci
paf_ci[,quantile(PAF, c(0.025, 0.975))]
